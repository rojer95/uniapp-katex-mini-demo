{"version":3,"file":"mhchem.js","sources":["common/wtto-markdown/js_sdk/mhchem.js"],"sourcesContent":["/* eslint-disable */\n/* -*- Mode: JavaScript; indent-tabs-mode:nil; js-indent-level: 2 -*- */\n/* vim: set ts=2 et sw=2 tw=80: */\n\n/*************************************************************\n *\n *  KaTeX mhchem.js\n *\n *  This file implements a KaTeX version of mhchem version 3.3.0.\n *  It is adapted from MathJax/extensions/TeX/mhchem.js\n *  It differs from the MathJax version as follows:\n *    1. The interface is changed so that it can be called from KaTeX, not MathJax.\n *    2. \\rlap and \\llap are replaced with \\mathrlap and \\mathllap.\n *    3. Four lines of code are edited in order to use \\raisebox instead of \\raise.\n *    4. The reaction arrow code is simplified. All reaction arrows are rendered\n *       using KaTeX extensible arrows instead of building non-extensible arrows.\n *    5. \\tripledash vertical alignment is slightly adjusted.\n *\n *    This code, as other KaTeX code, is released under the MIT license.\n * \n * /*************************************************************\n *\n *  MathJax/extensions/TeX/mhchem.js\n *\n *  Implements the \\ce command for handling chemical formulas\n *  from the mhchem LaTeX package.\n *\n *  ---------------------------------------------------------------------\n *\n *  Copyright (c) 2011-2015 The MathJax Consortium\n *  Copyright (c) 2015-2018 Martin Hensel\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n//\n// Coding Style\n//   - use '' for identifiers that can by minified/uglified\n//   - use \"\" for strings that need to stay untouched\n\n// version: \"3.3.0\" for MathJax and KaTeX\n\n\n// Add \\ce, \\pu, and \\tripledash to the KaTeX macros.\n\nkatex.__defineMacro(\"\\\\ce\", function(context) {\n  return chemParse(context.consumeArgs(1)[0], \"ce\")\n});\n\nkatex.__defineMacro(\"\\\\pu\", function(context) {\n  return chemParse(context.consumeArgs(1)[0], \"pu\");\n});\n\n//  Needed for \\bond for the ~ forms\n//  Raise by 2.56mu, not 2mu. We're raising a hyphen-minus, U+002D, not \n//  a mathematical minus, U+2212. So we need that extra 0.56.\nkatex.__defineMacro(\"\\\\tripledash\", \"{\\\\vphantom{-}\\\\raisebox{2.56mu}{$\\\\mkern2mu\"\n+ \"\\\\tiny\\\\text{-}\\\\mkern1mu\\\\text{-}\\\\mkern1mu\\\\text{-}\\\\mkern2mu$}}\");\n\nimport katex from \"katex\";\n\n  //\n  //  This is the main function for handing the \\ce and \\pu commands.\n  //  It takes the argument to \\ce or \\pu and returns the corresponding TeX string.\n  //\n\n  var chemParse = function (tokens, stateMachine) {\n    // Recreate the argument string from KaTeX's array of tokens.\n    var str = \"\";\n    var expectedLoc = tokens.length && tokens[tokens.length - 1].loc.start\n    for (var i = tokens.length - 1; i >= 0; i--) {\n      if(tokens[i].loc.start > expectedLoc) {\n        // context.consumeArgs has eaten a space.\n        str += \" \";\n        expectedLoc = tokens[i].loc.start;\n      }\n      str += tokens[i].text;\n      expectedLoc += tokens[i].text.length;\n    }\n    var tex = texify.go(mhchemParser.go(str, stateMachine));\n    return tex;\n  };\n\n  //\n  // Core parser for mhchem syntax  (recursive)\n  //\n  /** @type {MhchemParser} */\n  var mhchemParser = {\n    //\n    // Parses mchem \\ce syntax\n    //\n    // Call like\n    //   go(\"H2O\");\n    //\n    go: function (input, stateMachine) {\n      if (!input) { return []; }\n      if (stateMachine === undefined) { stateMachine = 'ce'; }\n      var state = '0';\n\n      //\n      // String buffers for parsing:\n      //\n      // buffer.a == amount\n      // buffer.o == element\n      // buffer.b == left-side superscript\n      // buffer.p == left-side subscript\n      // buffer.q == right-side subscript\n      // buffer.d == right-side superscript\n      //\n      // buffer.r == arrow\n      // buffer.rdt == arrow, script above, type\n      // buffer.rd == arrow, script above, content\n      // buffer.rqt == arrow, script below, type\n      // buffer.rq == arrow, script below, content\n      //\n      // buffer.text_\n      // buffer.rm\n      // etc.\n      //\n      // buffer.parenthesisLevel == int, starting at 0\n      // buffer.sb == bool, space before\n      // buffer.beginsWithBond == bool\n      //\n      // These letters are also used as state names.\n      //\n      // Other states:\n      // 0 == begin of main part (arrow/operator unlikely)\n      // 1 == next entity\n      // 2 == next entity (arrow/operator unlikely)\n      // 3 == next atom\n      // c == macro\n      //\n      /** @type {Buffer} */\n      var buffer = {};\n      buffer['parenthesisLevel'] = 0;\n\n      input = input.replace(/\\n/g, \" \");\n      input = input.replace(/[\\u2212\\u2013\\u2014\\u2010]/g, \"-\");\n      input = input.replace(/[\\u2026]/g, \"...\");\n\n      //\n      // Looks through mhchemParser.transitions, to execute a matching action\n      // (recursive)\n      //\n      var lastInput;\n      var watchdog = 10;\n      /** @type {ParserOutput[]} */\n      var output = [];\n      while (true) {\n        if (lastInput !== input) {\n          watchdog = 10;\n          lastInput = input;\n        } else {\n          watchdog--;\n        }\n        //\n        // Find actions in transition table\n        //\n        var machine = mhchemParser.stateMachines[stateMachine];\n        var t = machine.transitions[state] || machine.transitions['*'];\n        iterateTransitions:\n        for (var i=0; i<t.length; i++) {\n          var matches = mhchemParser.patterns.match_(t[i].pattern, input);\n          if (matches) {\n            //\n            // Execute actions\n            //\n            var task = t[i].task;\n            for (var iA=0; iA<task.action_.length; iA++) {\n              var o;\n              //\n              // Find and execute action\n              //\n              if (machine.actions[task.action_[iA].type_]) {\n                o = machine.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);\n              } else if (mhchemParser.actions[task.action_[iA].type_]) {\n                o = mhchemParser.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);\n              } else {\n                throw [\"MhchemBugA\", \"mhchem bug A. Please report. (\" + task.action_[iA].type_ + \")\"];  // Trying to use non-existing action\n              }\n              //\n              // Add output\n              //\n              mhchemParser.concatArray(output, o);\n            }\n            //\n            // Set next state,\n            // Shorten input,\n            // Continue with next character\n            //   (= apply only one transition per position)\n            //\n            state = task.nextState || state;\n            if (input.length > 0) {\n              if (!task.revisit) {\n                input = matches.remainder;\n              }\n              if (!task.toContinue) {\n                break iterateTransitions;\n              }\n            } else {\n              return output;\n            }\n          }\n        }\n        //\n        // Prevent infinite loop\n        //\n        if (watchdog <= 0) {\n          throw [\"MhchemBugU\", \"mhchem bug U. Please report.\"];  // Unexpected character\n        }\n      }\n    },\n    concatArray: function (a, b) {\n      if (b) {\n        if (Array.isArray(b)) {\n          for (var iB=0; iB<b.length; iB++) {\n            a.push(b[iB]);\n          }\n        } else {\n          a.push(b);\n        }\n      }\n    },\n\n    patterns: {\n      //\n      // Matching patterns\n      // either regexps or function that return null or {match_:\"a\", remainder:\"bc\"}\n      //\n      patterns: {\n        // property names must not look like integers (\"2\") for correct property traversal order, later on\n        'empty': /^$/,\n        'else': /^./,\n        'else2': /^./,\n        'space': /^\\s/,\n        'space A': /^\\s(?=[A-Z\\\\$])/,\n        'space$': /^\\s$/,\n        'a-z': /^[a-z]/,\n        'x': /^x/,\n        'x$': /^x$/,\n        'i$': /^i$/,\n        'letters': /^(?:[a-zA-Z\\u03B1-\\u03C9\\u0391-\\u03A9?@]|(?:\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\\s+|\\{\\}|(?![a-zA-Z]))))+/,\n        '\\\\greek': /^\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\\s+|\\{\\}|(?![a-zA-Z]))/,\n        'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,\n        '$one lowercase latin letter$ $': /^\\$(?:([a-z])(?:$|[^a-zA-Z]))\\$$/,\n        'one lowercase greek letter $': /^(?:\\$?[\\u03B1-\\u03C9]\\$?|\\$?\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\\s*\\$?)(?:\\s+|\\{\\}|(?![a-zA-Z]))$/,\n        'digits': /^[0-9]+/,\n        '-9.,9': /^[+\\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))/,\n        '-9.,9 no missing 0': /^[+\\-]?[0-9]+(?:[.,][0-9]+)?/,\n        '(-)(9.,9)(e)(99)': function (input) {\n          var m = input.match(/^(\\+\\-|\\+\\/\\-|\\+|\\-|\\\\pm\\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))?(\\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))\\))?(?:([eE]|\\s*(\\*|x|\\\\times|\\u00D7)\\s*10\\^)([+\\-]?[0-9]+|\\{[+\\-]?[0-9]+\\}))?/);\n          if (m && m[0]) {\n            return { match_: m.splice(1), remainder: input.substr(m[0].length) };\n          }\n          return null;\n        },\n        '(-)(9)^(-9)': function (input) {\n          var m = input.match(/^(\\+\\-|\\+\\/\\-|\\+|\\-|\\\\pm\\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+)?)\\^([+\\-]?[0-9]+|\\{[+\\-]?[0-9]+\\})/);\n          if (m && m[0]) {\n            return { match_: m.splice(1), remainder: input.substr(m[0].length) };\n          }\n          return null;\n        },\n        'state of aggregation $': function (input) {  // ... or crystal system\n          var a = mhchemParser.patterns.findObserveGroups(input, \"\", /^\\([a-z]{1,3}(?=[\\),])/, \")\", \"\");  // (aq), (aq,$\\infty$), (aq, sat)\n          if (a  &&  a.remainder.match(/^($|[\\s,;\\)\\]\\}])/)) { return a; }  //  AND end of 'phrase'\n          var m = input.match(/^(?:\\((?:\\\\ca\\s?)?\\$[amothc]\\$\\))/);  // OR crystal system ($o$) (\\ca$c$)\n          if (m) {\n            return { match_: m[0], remainder: input.substr(m[0].length) };\n          }\n          return null;\n        },\n        '_{(state of aggregation)}$': /^_\\{(\\([a-z]{1,3}\\))\\}/,\n        '{[(': /^(?:\\\\\\{|\\[|\\()/,\n        ')]}': /^(?:\\)|\\]|\\\\\\})/,\n        ', ': /^[,;]\\s*/,\n        ',': /^[,;]/,\n        '.': /^[.]/,\n        '. ': /^([.\\u22C5\\u00B7\\u2022])\\s*/,\n        '...': /^\\.\\.\\.(?=$|[^.])/,\n        '* ': /^([*])\\s*/,\n        '^{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"^{\", \"\", \"\", \"}\"); },\n        '^($...$)': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"^\", \"$\", \"$\", \"\"); },\n        '^a': /^\\^([0-9]+|[^\\\\_])/,\n        '^\\\\x{}{}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"^\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true); },\n        '^\\\\x{}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"^\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\"); },\n        '^\\\\x': /^\\^(\\\\[a-zA-Z]+)\\s*/,\n        '^(-1)': /^\\^(-?\\d+)/,\n        '\\'': /^'/,\n        '_{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"_{\", \"\", \"\", \"}\"); },\n        '_($...$)': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"_\", \"$\", \"$\", \"\"); },\n        '_9': /^_([+\\-]?[0-9]+|[^\\\\])/,\n        '_\\\\x{}{}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"_\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true); },\n        '_\\\\x{}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"_\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\"); },\n        '_\\\\x': /^_(\\\\[a-zA-Z]+)\\s*/,\n        '^_': /^(?:\\^(?=_)|\\_(?=\\^)|[\\^_]$)/,\n        '{}': /^\\{\\}/,\n        '{...}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\", \"{\", \"}\", \"\"); },\n        '{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"{\", \"\", \"\", \"}\"); },\n        '$...$': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\", \"$\", \"$\", \"\"); },\n        '${(...)}$': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"${\", \"\", \"\", \"}$\"); },\n        '$(...)$': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"$\", \"\", \"\", \"$\"); },\n        '=<>': /^[=<>]/,\n        '#': /^[#\\u2261]/,\n        '+': /^\\+/,\n        '-$': /^-(?=[\\s_},;\\]/]|$|\\([a-z]+\\))/,  // -space -, -; -] -/ -$ -state-of-aggregation\n        '-9': /^-(?=[0-9])/,\n        '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\\s,;\\)\\]\\}]))/,\n        '-': /^-/,\n        'pm-operator': /^(?:\\\\pm|\\$\\\\pm\\$|\\+-|\\+\\/-)/,\n        'operator': /^(?:\\+|(?:[\\-=<>]|<<|>>|\\\\approx|\\$\\\\approx\\$)(?=\\s|$|-?[0-9]))/,\n        'arrowUpDown': /^(?:v|\\(v\\)|\\^|\\(\\^\\))(?=$|[\\s,;\\)\\]\\}])/,\n        '\\\\bond{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\\\\bond{\", \"\", \"\", \"}\"); },\n        '->': /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\\u2192\\u27F6\\u21CC])/,\n        'CMT': /^[CMT](?=\\[)/,\n        '[(...)]': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"[\", \"\", \"\", \"]\"); },\n        '1st-level escape': /^(&|\\\\\\\\|\\\\hline)\\s*/,\n        '\\\\,': /^(?:\\\\[,\\ ;:])/,  // \\\\x - but output no space before\n        '\\\\x{}{}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true); },\n        '\\\\x{}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\"); },\n        '\\\\ca': /^\\\\ca(?:\\s+|(?![a-zA-Z]))/,\n        '\\\\x': /^(?:\\\\[a-zA-Z]+\\s*|\\\\[_&{}%])/,\n        'orbital': /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,  // only those with numbers in front, because the others will be formatted correctly anyway\n        'others': /^[\\/~|]/,\n        '\\\\frac{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\\\\frac{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\"); },\n        '\\\\overset{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\\\\overset{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\"); },\n        '\\\\underset{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\\\\underset{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\"); },\n        '\\\\underbrace{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\\\\underbrace{\", \"\", \"\", \"}_\", \"{\", \"\", \"\", \"}\"); },\n        '\\\\color{(...)}0': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\\\\color{\", \"\", \"\", \"}\"); },\n        '\\\\color{(...)}{(...)}1': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\\\\color{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\"); },\n        '\\\\color(...){(...)}2': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\\\\color\", \"\\\\\", \"\", /^(?=\\{)/, \"{\", \"\", \"\", \"}\"); },\n        '\\\\ce{(...)}': function (input) { return mhchemParser.patterns.findObserveGroups(input, \"\\\\ce{\", \"\", \"\", \"}\"); },\n        'oxidation$': /^(?:[+-][IVX]+|\\\\pm\\s*0|\\$\\\\pm\\$\\s*0)$/,\n        'd-oxidation$': /^(?:[+-]?\\s?[IVX]+|\\\\pm\\s*0|\\$\\\\pm\\$\\s*0)$/,  // 0 could be oxidation or charge\n        'roman numeral': /^[IVX]+/,\n        '1/2$': /^[+\\-]?(?:[0-9]+|\\$[a-z]\\$|[a-z])\\/[0-9]+(?:\\$[a-z]\\$|[a-z])?$/,\n        'amount': function (input) {\n          var match;\n          // e.g. 2, 0.5, 1/2, -2, n/2, +;  $a$ could be added later in parsing\n          match = input.match(/^(?:(?:(?:\\([+\\-]?[0-9]+\\/[0-9]+\\)|[+\\-]?(?:[0-9]+|\\$[a-z]\\$|[a-z])\\/[0-9]+|[+\\-]?[0-9]+[.,][0-9]+|[+\\-]?\\.[0-9]+|[+\\-]?[0-9]+)(?:[a-z](?=\\s*[A-Z]))?)|[+\\-]?[a-z](?=\\s*[A-Z])|\\+(?!\\s))/);\n          if (match) {\n            return { match_: match[0], remainder: input.substr(match[0].length) };\n          }\n          var a = mhchemParser.patterns.findObserveGroups(input, \"\", \"$\", \"$\", \"\");\n          if (a) {  // e.g. $2n-1$, $-$\n            match = a.match_.match(/^\\$(?:\\(?[+\\-]?(?:[0-9]*[a-z]?[+\\-])?[0-9]*[a-z](?:[+\\-][0-9]*[a-z]?)?\\)?|\\+|-)\\$$/);\n            if (match) {\n              return { match_: match[0], remainder: input.substr(match[0].length) };\n            }\n          }\n          return null;\n        },\n        'amount2': function (input) { return this['amount'](input); },\n        '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,\n        'formula$': function (input) {\n          if (input.match(/^\\([a-z]+\\)$/)) { return null; }  // state of aggregation = no formula\n          var match = input.match(/^(?:[a-z]|(?:[0-9\\ \\+\\-\\,\\.\\(\\)]+[a-z])+[0-9\\ \\+\\-\\,\\.\\(\\)]*|(?:[a-z][0-9\\ \\+\\-\\,\\.\\(\\)]+)+[a-z]?)$/);\n          if (match) {\n            return { match_: match[0], remainder: input.substr(match[0].length) };\n          }\n          return null;\n        },\n        'uprightEntities': /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,\n        '/': /^\\s*(\\/)\\s*/,\n        '//': /^\\s*(\\/\\/)\\s*/,\n        '*': /^\\s*[*.]\\s*/\n      },\n      findObserveGroups: function (input, begExcl, begIncl, endIncl, endExcl, beg2Excl, beg2Incl, end2Incl, end2Excl, combine) {\n        /** @type {{(input: string, pattern: string | RegExp): string | string[] | null;}} */\n        var _match = function (input, pattern) {\n          if (typeof pattern === \"string\") {\n            if (input.indexOf(pattern) !== 0) { return null; }\n            return pattern;\n          } else {\n            var match = input.match(pattern);\n            if (!match) { return null; }\n            return match[0];\n          }\n        };\n        /** @type {{(input: string, i: number, endChars: string | RegExp): {endMatchBegin: number, endMatchEnd: number} | null;}} */\n        var _findObserveGroups = function (input, i, endChars) {\n          var braces = 0;\n          while (i < input.length) {\n            var a = input.charAt(i);\n            var match = _match(input.substr(i), endChars);\n            if (match !== null  &&  braces === 0) {\n              return { endMatchBegin: i, endMatchEnd: i + match.length };\n            } else if (a === \"{\") {\n              braces++;\n            } else if (a === \"}\") {\n              if (braces === 0) {\n                throw [\"ExtraCloseMissingOpen\", \"Extra close brace or missing open brace\"];\n              } else {\n                braces--;\n              }\n            }\n            i++;\n          }\n          if (braces > 0) {\n            return null;\n          }\n          return null;\n        };\n        var match = _match(input, begExcl);\n        if (match === null) { return null; }\n        input = input.substr(match.length);\n        match = _match(input, begIncl);\n        if (match === null) { return null; }\n        var e = _findObserveGroups(input, match.length, endIncl || endExcl);\n        if (e === null) { return null; }\n        var match1 = input.substring(0, (endIncl ? e.endMatchEnd : e.endMatchBegin));\n        if (!(beg2Excl || beg2Incl)) {\n          return {\n            match_: match1,\n            remainder: input.substr(e.endMatchEnd)\n          };\n        } else {\n          var group2 = this.findObserveGroups(input.substr(e.endMatchEnd), beg2Excl, beg2Incl, end2Incl, end2Excl);\n          if (group2 === null) { return null; }\n          /** @type {string[]} */\n          var matchRet = [match1, group2.match_];\n          return {\n            match_: (combine ? matchRet.join(\"\") : matchRet),\n            remainder: group2.remainder\n          };\n        }\n      },\n\n      //\n      // Matching function\n      // e.g. match(\"a\", input) will look for the regexp called \"a\" and see if it matches\n      // returns null or {match_:\"a\", remainder:\"bc\"}\n      //\n      match_: function (m, input) {\n        var pattern = mhchemParser.patterns.patterns[m];\n        if (pattern === undefined) {\n          throw [\"MhchemBugP\", \"mhchem bug P. Please report. (\" + m + \")\"];  // Trying to use non-existing pattern\n        } else if (typeof pattern === \"function\") {\n          return mhchemParser.patterns.patterns[m](input);  // cannot use cached var pattern here, because some pattern functions need this===mhchemParser\n        } else {  // RegExp\n          var match = input.match(pattern);\n          if (match) {\n            var mm;\n            if (match[2]) {\n              mm = [ match[1], match[2] ];\n            } else if (match[1]) {\n              mm = match[1];\n            } else {\n              mm = match[0];\n            }\n            return { match_: mm, remainder: input.substr(match[0].length) };\n          }\n          return null;\n        }\n      }\n    },\n\n    //\n    // Generic state machine actions\n    //\n    actions: {\n      'a=': function (buffer, m) { buffer.a = (buffer.a || \"\") + m; },\n      'b=': function (buffer, m) { buffer.b = (buffer.b || \"\") + m; },\n      'p=': function (buffer, m) { buffer.p = (buffer.p || \"\") + m; },\n      'o=': function (buffer, m) { buffer.o = (buffer.o || \"\") + m; },\n      'q=': function (buffer, m) { buffer.q = (buffer.q || \"\") + m; },\n      'd=': function (buffer, m) { buffer.d = (buffer.d || \"\") + m; },\n      'rm=': function (buffer, m) { buffer.rm = (buffer.rm || \"\") + m; },\n      'text=': function (buffer, m) { buffer.text_ = (buffer.text_ || \"\") + m; },\n      'insert': function (buffer, m, a) { return { type_: a }; },\n      'insert+p1': function (buffer, m, a) { return { type_: a, p1: m }; },\n      'insert+p1+p2': function (buffer, m, a) { return { type_: a, p1: m[0], p2: m[1] }; },\n      'copy': function (buffer, m) { return m; },\n      'rm': function (buffer, m) { return { type_: 'rm', p1: m || \"\"}; },\n      'text': function (buffer, m) { return mhchemParser.go(m, 'text'); },\n      '{text}': function (buffer, m) {\n        var ret = [ \"{\" ];\n        mhchemParser.concatArray(ret, mhchemParser.go(m, 'text'));\n        ret.push(\"}\");\n        return ret;\n      },\n      'tex-math': function (buffer, m) { return mhchemParser.go(m, 'tex-math'); },\n      'tex-math tight': function (buffer, m) { return mhchemParser.go(m, 'tex-math tight'); },\n      'bond': function (buffer, m, k) { return { type_: 'bond', kind_: k || m }; },\n      'color0-output': function (buffer, m) { return { type_: 'color0', color: m[0] }; },\n      'ce': function (buffer, m) { return mhchemParser.go(m); },\n      '1/2': function (buffer, m) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n        if (m.match(/^[+\\-]/)) {\n          ret.push(m.substr(0, 1));\n          m = m.substr(1);\n        }\n        var n = m.match(/^([0-9]+|\\$[a-z]\\$|[a-z])\\/([0-9]+)(\\$[a-z]\\$|[a-z])?$/);\n        n[1] = n[1].replace(/\\$/g, \"\");\n        ret.push({ type_: 'frac', p1: n[1], p2: n[2] });\n        if (n[3]) {\n          n[3] = n[3].replace(/\\$/g, \"\");\n          ret.push({ type_: 'tex-math', p1: n[3] });\n        }\n        return ret;\n      },\n      '9,9': function (buffer, m) { return mhchemParser.go(m, '9,9'); }\n    },\n    //\n    // createTransitions\n    // convert  { 'letter': { 'state': { action_: 'output' } } }  to  { 'state' => [ { pattern: 'letter', task: { action_: [{type_: 'output'}] } } ] }\n    // with expansion of 'a|b' to 'a' and 'b' (at 2 places)\n    //\n    createTransitions: function (o) {\n      var pattern, state;\n      /** @type {string[]} */\n      var stateArray;\n      var i;\n      //\n      // 1. Collect all states\n      //\n      /** @type {Transitions} */\n      var transitions = {};\n      for (pattern in o) {\n        for (state in o[pattern]) {\n          stateArray = state.split(\"|\");\n          o[pattern][state].stateArray = stateArray;\n          for (i=0; i<stateArray.length; i++) {\n            transitions[stateArray[i]] = [];\n          }\n        }\n      }\n      //\n      // 2. Fill states\n      //\n      for (pattern in o) {\n        for (state in o[pattern]) {\n          stateArray = o[pattern][state].stateArray || [];\n          for (i=0; i<stateArray.length; i++) {\n            //\n            // 2a. Normalize actions into array:  'text=' ==> [{type_:'text='}]\n            // (Note to myself: Resolving the function here would be problematic. It would need .bind (for *this*) and currying (for *option*).)\n            //\n            /** @type {any} */\n            var p = o[pattern][state];\n            if (p.action_) {\n              p.action_ = [].concat(p.action_);\n              for (var k=0; k<p.action_.length; k++) {\n                if (typeof p.action_[k] === \"string\") {\n                  p.action_[k] = { type_: p.action_[k] };\n                }\n              }\n            } else {\n              p.action_ = [];\n            }\n            //\n            // 2.b Multi-insert\n            //\n            var patternArray = pattern.split(\"|\");\n            for (var j=0; j<patternArray.length; j++) {\n              if (stateArray[i] === '*') {  // insert into all\n                for (var t in transitions) {\n                  transitions[t].push({ pattern: patternArray[j], task: p });\n                }\n              } else {\n                transitions[stateArray[i]].push({ pattern: patternArray[j], task: p });\n              }\n            }\n          }\n        }\n      }\n      return transitions;\n    },\n    stateMachines: {}\n  };\n\n  //\n  // Definition of state machines\n  //\n  mhchemParser.stateMachines = {\n    //\n    // \\ce state machines\n    //\n    //#region ce\n    'ce': {  // main parser\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '*': { action_: 'output' } },\n        'else':  {\n          '0|1|2': { action_: 'beginsWithBond=false', revisit: true, toContinue: true } },\n        'oxidation$': {\n          '0': { action_: 'oxidation-output' } },\n        'CMT': {\n          'r': { action_: 'rdt=', nextState: 'rt' },\n          'rd': { action_: 'rqt=', nextState: 'rdt' } },\n        'arrowUpDown': {\n          '0|1|2|as': { action_: [ 'sb=false', 'output', 'operator' ], nextState: '1' } },\n        'uprightEntities': {\n          '0|1|2': { action_: [ 'o=', 'output' ], nextState: '1' } },\n        'orbital': {\n          '0|1|2|3': { action_: 'o=', nextState: 'o' } },\n        '->': {\n          '0|1|2|3': { action_: 'r=', nextState: 'r' },\n          'a|as': { action_: [ 'output', 'r=' ], nextState: 'r' },\n          '*': { action_: [ 'output', 'r=' ], nextState: 'r' } },\n        '+': {\n          'o': { action_: 'd= kv',  nextState: 'd' },\n          'd|D': { action_: 'd=', nextState: 'd' },\n          'q': { action_: 'd=',  nextState: 'qd' },\n          'qd|qD': { action_: 'd=', nextState: 'qd' },\n          'dq': { action_: [ 'output', 'd=' ], nextState: 'd' },\n          '3': { action_: [ 'sb=false', 'output', 'operator' ], nextState: '0' } },\n        'amount': {\n          '0|2': { action_: 'a=', nextState: 'a' } },\n        'pm-operator': {\n          '0|1|2|a|as': { action_: [ 'sb=false', 'output', { type_: 'operator', option: '\\\\pm' } ], nextState: '0' } },\n        'operator': {\n          '0|1|2|a|as': { action_: [ 'sb=false', 'output', 'operator' ], nextState: '0' } },\n        '-$': {\n          'o|q': { action_: [ 'charge or bond', 'output' ],  nextState: 'qd' },\n          'd': { action_: 'd=', nextState: 'd' },\n          'D': { action_: [ 'output', { type_: 'bond', option: \"-\" } ], nextState: '3' },\n          'q': { action_: 'd=',  nextState: 'qd' },\n          'qd': { action_: 'd=', nextState: 'qd' },\n          'qD|dq': { action_: [ 'output', { type_: 'bond', option: \"-\" } ], nextState: '3' } },\n        '-9': {\n          '3|o': { action_: [ 'output', { type_: 'insert', option: 'hyphen' } ], nextState: '3' } },\n        '- orbital overlap': {\n          'o': { action_: [ 'output', { type_: 'insert', option: 'hyphen' } ], nextState: '2' },\n          'd': { action_: [ 'output', { type_: 'insert', option: 'hyphen' } ], nextState: '2' } },\n        '-': {\n          '0|1|2': { action_: [ { type_: 'output', option: 1 }, 'beginsWithBond=true', { type_: 'bond', option: \"-\" } ], nextState: '3' },\n          '3': { action_: { type_: 'bond', option: \"-\" } },\n          'a': { action_: [ 'output', { type_: 'insert', option: 'hyphen' } ], nextState: '2' },\n          'as': { action_: [ { type_: 'output', option: 2 }, { type_: 'bond', option: \"-\" } ], nextState: '3' },\n          'b': { action_: 'b=' },\n          'o': { action_: { type_: '- after o/d', option: false }, nextState: '2' },\n          'q': { action_: { type_: '- after o/d', option: false }, nextState: '2' },\n          'd|qd|dq': { action_: { type_: '- after o/d', option: true }, nextState: '2' },\n          'D|qD|p': { action_: [ 'output', { type_: 'bond', option: \"-\" } ], nextState: '3' } },\n        'amount2': {\n          '1|3': { action_: 'a=', nextState: 'a' } },\n        'letters': {\n          '0|1|2|3|a|as|b|p|bp|o': { action_: 'o=', nextState: 'o' },\n          'q|dq': { action_: ['output', 'o='], nextState: 'o' },\n          'd|D|qd|qD': { action_: 'o after d', nextState: 'o' } },\n        'digits': {\n          'o': { action_: 'q=', nextState: 'q' },\n          'd|D': { action_: 'q=', nextState: 'dq' },\n          'q': { action_: [ 'output', 'o=' ], nextState: 'o' },\n          'a': { action_: 'o=', nextState: 'o' } },\n        'space A': {\n          'b|p|bp': {} },\n        'space': {\n          'a': { nextState: 'as' },\n          '0': { action_: 'sb=false' },\n          '1|2': { action_: 'sb=true' },\n          'r|rt|rd|rdt|rdq': { action_: 'output', nextState: '0' },\n          '*': { action_: [ 'output', 'sb=true' ], nextState: '1'} },\n        '1st-level escape': {\n          '1|2': { action_: [ 'output', { type_: 'insert+p1', option: '1st-level escape' } ] },\n          '*': { action_: [ 'output', { type_: 'insert+p1', option: '1st-level escape' } ], nextState: '0' } },\n        '[(...)]': {\n          'r|rt': { action_: 'rd=', nextState: 'rd' },\n          'rd|rdt': { action_: 'rq=', nextState: 'rdq' } },\n        '...': {\n          'o|d|D|dq|qd|qD': { action_: [ 'output', { type_: 'bond', option: \"...\" } ], nextState: '3' },\n          '*': { action_: [ { type_: 'output', option: 1 }, { type_: 'insert', option: 'ellipsis' } ], nextState: '1' } },\n        '. |* ': {\n          '*': { action_: [ 'output', { type_: 'insert', option: 'addition compound' } ], nextState: '1' } },\n        'state of aggregation $': {\n          '*': { action_: [ 'output', 'state of aggregation' ], nextState: '1' } },\n        '{[(': {\n          'a|as|o': { action_: [ 'o=', 'output', 'parenthesisLevel++' ], nextState: '2' },\n          '0|1|2|3': { action_: [ 'o=', 'output', 'parenthesisLevel++' ], nextState: '2' },\n          '*': { action_: [ 'output', 'o=', 'output', 'parenthesisLevel++' ], nextState: '2' } },\n        ')]}': {\n          '0|1|2|3|b|p|bp|o': { action_: [ 'o=', 'parenthesisLevel--' ], nextState: 'o' },\n          'a|as|d|D|q|qd|qD|dq': { action_: [ 'output', 'o=', 'parenthesisLevel--' ], nextState: 'o' } },\n        ', ': {\n          '*': { action_: [ 'output', 'comma' ], nextState: '0' } },\n        '^_': {  // ^ and _ without a sensible argument\n          '*': { } },\n        '^{(...)}|^($...$)': {\n          '0|1|2|as': { action_: 'b=', nextState: 'b' },\n          'p': { action_: 'b=', nextState: 'bp' },\n          '3|o': { action_: 'd= kv', nextState: 'D' },\n          'q': { action_: 'd=', nextState: 'qD' },\n          'd|D|qd|qD|dq': { action_: [ 'output', 'd=' ], nextState: 'D' } },\n        '^a|^\\\\x{}{}|^\\\\x{}|^\\\\x|\\'': {\n          '0|1|2|as': { action_: 'b=', nextState: 'b' },\n          'p': { action_: 'b=', nextState: 'bp' },\n          '3|o': { action_: 'd= kv', nextState: 'd' },\n          'q': { action_: 'd=', nextState: 'qd' },\n          'd|qd|D|qD': { action_: 'd=' },\n          'dq': { action_: [ 'output', 'd=' ], nextState: 'd' } },\n        '_{(state of aggregation)}$': {\n          'd|D|q|qd|qD|dq': { action_: [ 'output', 'q=' ], nextState: 'q' } },\n        '_{(...)}|_($...$)|_9|_\\\\x{}{}|_\\\\x{}|_\\\\x': {\n          '0|1|2|as': { action_: 'p=', nextState: 'p' },\n          'b': { action_: 'p=', nextState: 'bp' },\n          '3|o': { action_: 'q=', nextState: 'q' },\n          'd|D': { action_: 'q=', nextState: 'dq' },\n          'q|qd|qD|dq': { action_: [ 'output', 'q=' ], nextState: 'q' } },\n        '=<>': {\n          '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': { action_: [ { type_: 'output', option: 2 }, 'bond' ], nextState: '3' } },\n        '#': {\n          '0|1|2|3|a|as|o': { action_: [ { type_: 'output', option: 2 }, { type_: 'bond', option: \"#\" } ], nextState: '3' } },\n        '{}': {\n          '*': { action_: { type_: 'output', option: 1 },  nextState: '1' } },\n        '{...}': {\n          '0|1|2|3|a|as|b|p|bp': { action_: 'o=', nextState: 'o' },\n          'o|d|D|q|qd|qD|dq': { action_: [ 'output', 'o=' ], nextState: 'o' } },\n        '$...$': {\n          'a': { action_: 'a=' },  // 2$n$\n          '0|1|2|3|as|b|p|bp|o': { action_: 'o=', nextState: 'o' },  // not 'amount'\n          'as|o': { action_: 'o=' },\n          'q|d|D|qd|qD|dq': { action_: [ 'output', 'o=' ], nextState: 'o' } },\n        '\\\\bond{(...)}': {\n          '*': { action_: [ { type_: 'output', option: 2 }, 'bond' ], nextState: \"3\" } },\n        '\\\\frac{(...)}': {\n          '*': { action_: [ { type_: 'output', option: 1 }, 'frac-output' ], nextState: '3' } },\n        '\\\\overset{(...)}': {\n          '*': { action_: [ { type_: 'output', option: 2 }, 'overset-output' ], nextState: '3' } },\n        '\\\\underset{(...)}': {\n          '*': { action_: [ { type_: 'output', option: 2 }, 'underset-output' ], nextState: '3' } },\n        '\\\\underbrace{(...)}': {\n          '*': { action_: [ { type_: 'output', option: 2 }, 'underbrace-output' ], nextState: '3' } },\n        '\\\\color{(...)}{(...)}1|\\\\color(...){(...)}2': {\n          '*': { action_: [ { type_: 'output', option: 2 }, 'color-output' ], nextState: '3' } },\n        '\\\\color{(...)}0': {\n          '*': { action_: [ { type_: 'output', option: 2 }, 'color0-output' ] } },\n        '\\\\ce{(...)}': {\n          '*': { action_: [ { type_: 'output', option: 2 }, 'ce' ], nextState: '3' } },\n        '\\\\,': {\n          '*': { action_: [ { type_: 'output', option: 1 }, 'copy' ], nextState: '1' } },\n        '\\\\x{}{}|\\\\x{}|\\\\x': {\n          '0|1|2|3|a|as|b|p|bp|o|c0': { action_: [ 'o=', 'output' ], nextState: '3' },\n          '*': { action_: ['output', 'o=', 'output' ], nextState: '3' } },\n        'others': {\n          '*': { action_: [ { type_: 'output', option: 1 }, 'copy' ], nextState: '3' } },\n        'else2': {\n          'a': { action_: 'a to o', nextState: 'o', revisit: true },\n          'as': { action_: [ 'output', 'sb=true' ], nextState: '1', revisit: true },\n          'r|rt|rd|rdt|rdq': { action_: [ 'output' ], nextState: '0', revisit: true },\n          '*': { action_: [ 'output', 'copy' ], nextState: '3' } }\n      }),\n      actions: {\n        'o after d': function (buffer, m) {\n          var ret;\n          if ((buffer.d || \"\").match(/^[0-9]+$/)) {\n            var tmp = buffer.d;\n            buffer.d = undefined;\n            ret = this['output'](buffer);\n            buffer.b = tmp;\n          } else {\n            ret = this['output'](buffer);\n          }\n          mhchemParser.actions['o='](buffer, m);\n          return ret;\n        },\n        'd= kv': function (buffer, m) {\n          buffer.d = m;\n          buffer.dType = 'kv';\n        },\n        'charge or bond': function (buffer, m) {\n          if (buffer['beginsWithBond']) {\n            /** @type {ParserOutput[]} */\n            var ret = [];\n            mhchemParser.concatArray(ret, this['output'](buffer));\n            mhchemParser.concatArray(ret, mhchemParser.actions['bond'](buffer, m, \"-\"));\n            return ret;\n          } else {\n            buffer.d = m;\n          }\n        },\n        '- after o/d': function (buffer, m, isAfterD) {\n          var c1 = mhchemParser.patterns.match_('orbital', buffer.o || \"\");\n          var c2 = mhchemParser.patterns.match_('one lowercase greek letter $', buffer.o || \"\");\n          var c3 = mhchemParser.patterns.match_('one lowercase latin letter $', buffer.o || \"\");\n          var c4 = mhchemParser.patterns.match_('$one lowercase latin letter$ $', buffer.o || \"\");\n          var hyphenFollows =  m===\"-\" && ( c1 && c1.remainder===\"\"  ||  c2  ||  c3  ||  c4 );\n          if (hyphenFollows && !buffer.a && !buffer.b && !buffer.p && !buffer.d && !buffer.q && !c1 && c3) {\n            buffer.o = '$' + buffer.o + '$';\n          }\n          /** @type {ParserOutput[]} */\n          var ret = [];\n          if (hyphenFollows) {\n            mhchemParser.concatArray(ret, this['output'](buffer));\n            ret.push({ type_: 'hyphen' });\n          } else {\n            c1 = mhchemParser.patterns.match_('digits', buffer.d || \"\");\n            if (isAfterD && c1 && c1.remainder==='') {\n              mhchemParser.concatArray(ret, mhchemParser.actions['d='](buffer, m));\n              mhchemParser.concatArray(ret, this['output'](buffer));\n            } else {\n              mhchemParser.concatArray(ret, this['output'](buffer));\n              mhchemParser.concatArray(ret, mhchemParser.actions['bond'](buffer, m, \"-\"));\n            }\n          }\n          return ret;\n        },\n        'a to o': function (buffer) {\n          buffer.o = buffer.a;\n          buffer.a = undefined;\n        },\n        'sb=true': function (buffer) { buffer.sb = true; },\n        'sb=false': function (buffer) { buffer.sb = false; },\n        'beginsWithBond=true': function (buffer) { buffer['beginsWithBond'] = true; },\n        'beginsWithBond=false': function (buffer) { buffer['beginsWithBond'] = false; },\n        'parenthesisLevel++': function (buffer) { buffer['parenthesisLevel']++; },\n        'parenthesisLevel--': function (buffer) { buffer['parenthesisLevel']--; },\n        'state of aggregation': function (buffer, m) {\n          return { type_: 'state of aggregation', p1: mhchemParser.go(m, 'o') };\n        },\n        'comma': function (buffer, m) {\n          var a = m.replace(/\\s*$/, '');\n          var withSpace = (a !== m);\n          if (withSpace  &&  buffer['parenthesisLevel'] === 0) {\n            return { type_: 'comma enumeration L', p1: a };\n          } else {\n            return { type_: 'comma enumeration M', p1: a };\n          }\n        },\n        'output': function (buffer, m, entityFollows) {\n          // entityFollows:\n          //   undefined = if we have nothing else to output, also ignore the just read space (buffer.sb)\n          //   1 = an entity follows, never omit the space if there was one just read before (can only apply to state 1)\n          //   2 = 1 + the entity can have an amount, so output a\\, instead of converting it to o (can only apply to states a|as)\n          /** @type {ParserOutput | ParserOutput[]} */\n          var ret;\n          if (!buffer.r) {\n            ret = [];\n            if (!buffer.a && !buffer.b && !buffer.p && !buffer.o && !buffer.q && !buffer.d && !entityFollows) {\n              //ret = [];\n            } else {\n              if (buffer.sb) {\n                ret.push({ type_: 'entitySkip' });\n              }\n              if (!buffer.o && !buffer.q && !buffer.d && !buffer.b && !buffer.p && entityFollows!==2) {\n                buffer.o = buffer.a;\n                buffer.a = undefined;\n              } else if (!buffer.o && !buffer.q && !buffer.d && (buffer.b || buffer.p)) {\n                buffer.o = buffer.a;\n                buffer.d = buffer.b;\n                buffer.q = buffer.p;\n                buffer.a = buffer.b = buffer.p = undefined;\n              } else {\n                if (buffer.o && buffer.dType==='kv' && mhchemParser.patterns.match_('d-oxidation$', buffer.d || \"\")) {\n                  buffer.dType = 'oxidation';\n                } else if (buffer.o && buffer.dType==='kv' && !buffer.q) {\n                  buffer.dType = undefined;\n                }\n              }\n              ret.push({\n                type_: 'chemfive',\n                a: mhchemParser.go(buffer.a, 'a'),\n                b: mhchemParser.go(buffer.b, 'bd'),\n                p: mhchemParser.go(buffer.p, 'pq'),\n                o: mhchemParser.go(buffer.o, 'o'),\n                q: mhchemParser.go(buffer.q, 'pq'),\n                d: mhchemParser.go(buffer.d, (buffer.dType === 'oxidation' ? 'oxidation' : 'bd')),\n                dType: buffer.dType\n              });\n            }\n          } else {  // r\n            /** @type {ParserOutput[]} */\n            var rd;\n            if (buffer.rdt === 'M') {\n              rd = mhchemParser.go(buffer.rd, 'tex-math');\n            } else if (buffer.rdt === 'T') {\n              rd = [ { type_: 'text', p1: buffer.rd || \"\" } ];\n            } else {\n              rd = mhchemParser.go(buffer.rd);\n            }\n            /** @type {ParserOutput[]} */\n            var rq;\n            if (buffer.rqt === 'M') {\n              rq = mhchemParser.go(buffer.rq, 'tex-math');\n            } else if (buffer.rqt === 'T') {\n              rq = [ { type_: 'text', p1: buffer.rq || \"\"} ];\n            } else {\n              rq = mhchemParser.go(buffer.rq);\n            }\n            ret = {\n              type_: 'arrow',\n              r: buffer.r,\n              rd: rd,\n              rq: rq\n            };\n          }\n          for (var p in buffer) {\n            if (p !== 'parenthesisLevel'  &&  p !== 'beginsWithBond') {\n              delete buffer[p];\n            }\n          }\n          return ret;\n        },\n        'oxidation-output': function (buffer, m) {\n          var ret = [ \"{\" ];\n          mhchemParser.concatArray(ret, mhchemParser.go(m, 'oxidation'));\n          ret.push(\"}\");\n          return ret;\n        },\n        'frac-output': function (buffer, m) {\n          return { type_: 'frac-ce', p1: mhchemParser.go(m[0]), p2: mhchemParser.go(m[1]) };\n        },\n        'overset-output': function (buffer, m) {\n          return { type_: 'overset', p1: mhchemParser.go(m[0]), p2: mhchemParser.go(m[1]) };\n        },\n        'underset-output': function (buffer, m) {\n          return { type_: 'underset', p1: mhchemParser.go(m[0]), p2: mhchemParser.go(m[1]) };\n        },\n        'underbrace-output': function (buffer, m) {\n          return { type_: 'underbrace', p1: mhchemParser.go(m[0]), p2: mhchemParser.go(m[1]) };\n        },\n        'color-output': function (buffer, m) {\n          return { type_: 'color', color1: m[0], color2: mhchemParser.go(m[1]) };\n        },\n        'r=': function (buffer, m) { buffer.r = m; },\n        'rdt=': function (buffer, m) { buffer.rdt = m; },\n        'rd=': function (buffer, m) { buffer.rd = m; },\n        'rqt=': function (buffer, m) { buffer.rqt = m; },\n        'rq=': function (buffer, m) { buffer.rq = m; },\n        'operator': function (buffer, m, p1) { return { type_: 'operator', kind_: (p1 || m) }; }\n      }\n    },\n    'a': {\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '*': {} },\n        '1/2$': {\n          '0': { action_: '1/2' } },\n        'else': {\n          '0': { nextState: '1', revisit: true } },\n        '$(...)$': {\n          '*': { action_: 'tex-math tight', nextState: '1' } },\n        ',': {\n          '*': { action_: { type_: 'insert', option: 'commaDecimal' } } },\n        'else2': {\n          '*': { action_: 'copy' } }\n      }),\n      actions: {}\n    },\n    'o': {\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '*': {} },\n        '1/2$': {\n          '0': { action_: '1/2' } },\n        'else': {\n          '0': { nextState: '1', revisit: true } },\n        'letters': {\n          '*': { action_: 'rm' } },\n        '\\\\ca': {\n          '*': { action_: { type_: 'insert', option: 'circa' } } },\n        '\\\\x{}{}|\\\\x{}|\\\\x': {\n          '*': { action_: 'copy' } },\n        '${(...)}$|$(...)$': {\n          '*': { action_: 'tex-math' } },\n        '{(...)}': {\n          '*': { action_: '{text}' } },\n        'else2': {\n          '*': { action_: 'copy' } }\n      }),\n      actions: {}\n    },\n    'text': {\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '*': { action_: 'output' } },\n        '{...}': {\n          '*': { action_: 'text=' } },\n        '${(...)}$|$(...)$': {\n          '*': { action_: 'tex-math' } },\n        '\\\\greek': {\n          '*': { action_: [ 'output', 'rm' ] } },\n        '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n          '*': { action_: [ 'output', 'copy' ] } },\n        'else': {\n          '*': { action_: 'text=' } }\n      }),\n      actions: {\n        'output': function (buffer) {\n          if (buffer.text_) {\n            /** @type {ParserOutput} */\n            var ret = { type_: 'text', p1: buffer.text_ };\n            for (var p in buffer) { delete buffer[p]; }\n            return ret;\n          }\n        }\n      }\n    },\n    'pq': {\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '*': {} },\n        'state of aggregation $': {\n          '*': { action_: 'state of aggregation' } },\n        'i$': {\n          '0': { nextState: '!f', revisit: true } },\n        '(KV letters),': {\n          '0': { action_: 'rm', nextState: '0' } },\n        'formula$': {\n          '0': { nextState: 'f', revisit: true } },\n        '1/2$': {\n          '0': { action_: '1/2' } },\n        'else': {\n          '0': { nextState: '!f', revisit: true } },\n        '${(...)}$|$(...)$': {\n          '*': { action_: 'tex-math' } },\n        '{(...)}': {\n          '*': { action_: 'text' } },\n        'a-z': {\n          'f': { action_: 'tex-math' } },\n        'letters': {\n          '*': { action_: 'rm' } },\n        '-9.,9': {\n          '*': { action_: '9,9'  } },\n        ',': {\n          '*': { action_: { type_: 'insert+p1', option: 'comma enumeration S' } } },\n        '\\\\color{(...)}{(...)}1|\\\\color(...){(...)}2': {\n          '*': { action_: 'color-output' } },\n        '\\\\color{(...)}0': {\n          '*': { action_: 'color0-output' } },\n        '\\\\ce{(...)}': {\n          '*': { action_: 'ce' } },\n        '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n          '*': { action_: 'copy' } },\n        'else2': {\n          '*': { action_: 'copy' } }\n      }),\n      actions: {\n        'state of aggregation': function (buffer, m) {\n          return { type_: 'state of aggregation subscript', p1: mhchemParser.go(m, 'o') };\n        },\n        'color-output': function (buffer, m) {\n          return { type_: 'color', color1: m[0], color2: mhchemParser.go(m[1], 'pq') };\n        }\n      }\n    },\n    'bd': {\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '*': {} },\n        'x$': {\n          '0': { nextState: '!f', revisit: true } },\n        'formula$': {\n          '0': { nextState: 'f', revisit: true } },\n        'else': {\n          '0': { nextState: '!f', revisit: true } },\n        '-9.,9 no missing 0': {\n          '*': { action_: '9,9' } },\n        '.': {\n          '*': { action_: { type_: 'insert', option: 'electron dot' } } },\n        'a-z': {\n          'f': { action_: 'tex-math' } },\n        'x': {\n          '*': { action_: { type_: 'insert', option: 'KV x' } } },\n        'letters': {\n          '*': { action_: 'rm' } },\n        '\\'': {\n          '*': { action_: { type_: 'insert', option: 'prime' } } },\n        '${(...)}$|$(...)$': {\n          '*': { action_: 'tex-math' } },\n        '{(...)}': {\n          '*': { action_: 'text' } },\n        '\\\\color{(...)}{(...)}1|\\\\color(...){(...)}2': {\n          '*': { action_: 'color-output' } },\n        '\\\\color{(...)}0': {\n          '*': { action_: 'color0-output' } },\n        '\\\\ce{(...)}': {\n          '*': { action_: 'ce' } },\n        '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n          '*': { action_: 'copy' } },\n        'else2': {\n          '*': { action_: 'copy' } }\n      }),\n      actions: {\n        'color-output': function (buffer, m) {\n          return { type_: 'color', color1: m[0], color2: mhchemParser.go(m[1], 'bd') };\n        }\n      }\n    },\n    'oxidation': {\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '*': {} },\n        'roman numeral': {\n          '*': { action_: 'roman-numeral' } },\n        '${(...)}$|$(...)$': {\n          '*': { action_: 'tex-math' } },\n        'else': {\n          '*': { action_: 'copy' } }\n      }),\n      actions: {\n        'roman-numeral': function (buffer, m) { return { type_: 'roman numeral', p1: m || \"\" }; }\n      }\n    },\n    'tex-math': {\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '*': { action_: 'output' } },\n        '\\\\ce{(...)}': {\n          '*': { action_: [ 'output', 'ce' ] } },\n        '{...}|\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n          '*': { action_: 'o=' } },\n        'else': {\n          '*': { action_: 'o=' } }\n      }),\n      actions: {\n        'output': function (buffer) {\n          if (buffer.o) {\n            /** @type {ParserOutput} */\n            var ret = { type_: 'tex-math', p1: buffer.o };\n            for (var p in buffer) { delete buffer[p]; }\n            return ret;\n          }\n        }\n      }\n    },\n    'tex-math tight': {\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '*': { action_: 'output' } },\n        '\\\\ce{(...)}': {\n          '*': { action_: [ 'output', 'ce' ] } },\n        '{...}|\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n          '*': { action_: 'o=' } },\n        '-|+': {\n          '*': { action_: 'tight operator' } },\n        'else': {\n          '*': { action_: 'o=' } }\n      }),\n      actions: {\n        'tight operator': function (buffer, m) { buffer.o = (buffer.o || \"\") + \"{\"+m+\"}\"; },\n        'output': function (buffer) {\n          if (buffer.o) {\n            /** @type {ParserOutput} */\n            var ret = { type_: 'tex-math', p1: buffer.o };\n            for (var p in buffer) { delete buffer[p]; }\n            return ret;\n          }\n        }\n      }\n    },\n    '9,9': {\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '*': {} },\n        ',': {\n          '*': { action_: 'comma' } },\n        'else': {\n          '*': { action_: 'copy' } }\n      }),\n      actions: {\n        'comma': function () { return { type_: 'commaDecimal' }; }\n      }\n    },\n    //#endregion\n    //\n    // \\pu state machines\n    //\n    //#region pu\n    'pu': {\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '*': { action_: 'output' } },\n        'space$': {\n          '*': { action_: [ 'output', 'space' ] } },\n        '{[(|)]}': {\n          '0|a': { action_: 'copy' } },\n        '(-)(9)^(-9)': {\n          '0': { action_: 'number^', nextState: 'a' } },\n        '(-)(9.,9)(e)(99)': {\n          '0': { action_: 'enumber', nextState: 'a' } },\n        'space': {\n          '0|a': {} },\n        'pm-operator': {\n          '0|a': { action_: { type_: 'operator', option: '\\\\pm' }, nextState: '0' } },\n        'operator': {\n          '0|a': { action_: 'copy', nextState: '0' } },\n        '//': {\n          'd': { action_: 'o=', nextState: '/' } },\n        '/': {\n          'd': { action_: 'o=', nextState: '/' } },\n        '{...}|else': {\n          '0|d': { action_: 'd=', nextState: 'd' },\n          'a': { action_: [ 'space', 'd=' ], nextState: 'd' },\n          '/|q': { action_: 'q=', nextState: 'q' } }\n      }),\n      actions: {\n        'enumber': function (buffer, m) {\n          /** @type {ParserOutput[]} */\n          var ret = [];\n          if (m[0] === \"+-\"  ||  m[0] === \"+/-\") {\n            ret.push(\"\\\\pm \");\n          } else if (m[0]) {\n            ret.push(m[0]);\n          }\n          if (m[1]) {\n            mhchemParser.concatArray(ret, mhchemParser.go(m[1], 'pu-9,9'));\n            if (m[2]) {\n              if (m[2].match(/[,.]/)) {\n                mhchemParser.concatArray(ret, mhchemParser.go(m[2], 'pu-9,9'));\n              } else {\n                ret.push(m[2]);\n              }\n            }\n            m[3] = m[4] || m[3];\n            if (m[3]) {\n              m[3] = m[3].trim();\n              if (m[3] === \"e\"  ||  m[3].substr(0, 1) === \"*\") {\n                ret.push({ type_: 'cdot' });\n              } else {\n                ret.push({ type_: 'times' });\n              }\n            }\n          }\n          if (m[3]) {\n            ret.push(\"10^{\"+m[5]+\"}\");\n          }\n          return ret;\n        },\n        'number^': function (buffer, m) {\n          /** @type {ParserOutput[]} */\n          var ret = [];\n          if (m[0] === \"+-\"  ||  m[0] === \"+/-\") {\n            ret.push(\"\\\\pm \");\n          } else if (m[0]) {\n            ret.push(m[0]);\n          }\n          mhchemParser.concatArray(ret, mhchemParser.go(m[1], 'pu-9,9'));\n          ret.push(\"^{\"+m[2]+\"}\");\n          return ret;\n        },\n        'operator': function (buffer, m, p1) { return { type_: 'operator', kind_: (p1 || m) }; },\n        'space': function () { return { type_: 'pu-space-1' }; },\n        'output': function (buffer) {\n          /** @type {ParserOutput | ParserOutput[]} */\n          var ret;\n          var md = mhchemParser.patterns.match_('{(...)}', buffer.d || \"\");\n          if (md  &&  md.remainder === '') { buffer.d = md.match_; }\n          var mq = mhchemParser.patterns.match_('{(...)}', buffer.q || \"\");\n          if (mq  &&  mq.remainder === '') { buffer.q = mq.match_; }\n          if (buffer.d) {\n            buffer.d = buffer.d.replace(/\\u00B0C|\\^oC|\\^{o}C/g, \"{}^{\\\\circ}C\");\n            buffer.d = buffer.d.replace(/\\u00B0F|\\^oF|\\^{o}F/g, \"{}^{\\\\circ}F\");\n          }\n          if (buffer.q) {  // fraction\n            buffer.q = buffer.q.replace(/\\u00B0C|\\^oC|\\^{o}C/g, \"{}^{\\\\circ}C\");\n            buffer.q = buffer.q.replace(/\\u00B0F|\\^oF|\\^{o}F/g, \"{}^{\\\\circ}F\");\n            var b5 = {\n              d: mhchemParser.go(buffer.d, 'pu'),\n              q: mhchemParser.go(buffer.q, 'pu')\n            };\n            if (buffer.o === '//') {\n              ret = { type_: 'pu-frac', p1: b5.d, p2: b5.q };\n            } else {\n              ret = b5.d;\n              if (b5.d.length > 1  ||  b5.q.length > 1) {\n                ret.push({ type_: ' / ' });\n              } else {\n                ret.push({ type_: '/' });\n              }\n              mhchemParser.concatArray(ret, b5.q);\n            }\n          } else {  // no fraction\n            ret = mhchemParser.go(buffer.d, 'pu-2');\n          }\n          for (var p in buffer) { delete buffer[p]; }\n          return ret;\n        }\n      }\n    },\n    'pu-2': {\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '*': { action_: 'output' } },\n        '*': {\n          '*': { action_: [ 'output', 'cdot' ], nextState: '0' } },\n        '\\\\x': {\n          '*': { action_: 'rm=' } },\n        'space': {\n          '*': { action_: [ 'output', 'space' ], nextState: '0' } },\n        '^{(...)}|^(-1)': {\n          '1': { action_: '^(-1)' } },\n        '-9.,9': {\n          '0': { action_: 'rm=', nextState: '0' },\n          '1': { action_: '^(-1)', nextState: '0' } },\n        '{...}|else': {\n          '*': { action_: 'rm=', nextState: '1' } }\n      }),\n      actions: {\n        'cdot': function () { return { type_: 'tight cdot' }; },\n        '^(-1)': function (buffer, m) { buffer.rm += \"^{\"+m+\"}\"; },\n        'space': function () { return { type_: 'pu-space-2' }; },\n        'output': function (buffer) {\n          /** @type {ParserOutput | ParserOutput[]} */\n          var ret = [];\n          if (buffer.rm) {\n            var mrm = mhchemParser.patterns.match_('{(...)}', buffer.rm || \"\");\n            if (mrm  &&  mrm.remainder === '') {\n              ret = mhchemParser.go(mrm.match_, 'pu');\n            } else {\n              ret = { type_: 'rm', p1: buffer.rm };\n            }\n          }\n          for (var p in buffer) { delete buffer[p]; }\n          return ret;\n        }\n      }\n    },\n    'pu-9,9': {\n      transitions: mhchemParser.createTransitions({\n        'empty': {\n          '0': { action_: 'output-0' },\n          'o': { action_: 'output-o' } },\n        ',': {\n          '0': { action_: [ 'output-0', 'comma' ], nextState: 'o' } },\n        '.': {\n          '0': { action_: [ 'output-0', 'copy' ], nextState: 'o' } },\n        'else': {\n          '*': { action_: 'text=' } }\n      }),\n      actions: {\n        'comma': function () { return { type_: 'commaDecimal' }; },\n        'output-0': function (buffer) {\n          /** @type {ParserOutput[]} */\n          var ret = [];\n          buffer.text_ = buffer.text_ || \"\";\n          if (buffer.text_.length > 4) {\n            var a = buffer.text_.length % 3;\n            if (a === 0) { a = 3; }\n            for (var i=buffer.text_.length-3; i>0; i-=3) {\n              ret.push(buffer.text_.substr(i, 3));\n              ret.push({ type_: '1000 separator' });\n            }\n            ret.push(buffer.text_.substr(0, a));\n            ret.reverse();\n          } else {\n            ret.push(buffer.text_);\n          }\n          for (var p in buffer) { delete buffer[p]; }\n          return ret;\n        },\n        'output-o': function (buffer) {\n          /** @type {ParserOutput[]} */\n          var ret = [];\n          buffer.text_ = buffer.text_ || \"\";\n          if (buffer.text_.length > 4) {\n            var a = buffer.text_.length - 3;\n            for (var i=0; i<a; i+=3) {\n              ret.push(buffer.text_.substr(i, 3));\n              ret.push({ type_: '1000 separator' });\n            }\n            ret.push(buffer.text_.substr(i));\n          } else {\n            ret.push(buffer.text_);\n          }\n          for (var p in buffer) { delete buffer[p]; }\n          return ret;\n        }\n      }\n    }\n    //#endregion\n  };\n\n  //\n  // texify: Take MhchemParser output and convert it to TeX\n  //\n  /** @type {Texify} */\n  var texify = {\n    go: function (input, isInner) {  // (recursive, max 4 levels)\n      if (!input) { return \"\"; }\n      var res = \"\";\n      var cee = false;\n      for (var i=0; i < input.length; i++) {\n        var inputi = input[i];\n        if (typeof inputi === \"string\") {\n          res += inputi;\n        } else {\n          res += texify._go2(inputi);\n          if (inputi.type_ === '1st-level escape') { cee = true; }\n        }\n      }\n      if (!isInner && !cee && res) {\n        res = \"{\" + res + \"}\";\n      }\n      return res;\n    },\n    _goInner: function (input) {\n      if (!input) { return input; }\n      return texify.go(input, true);\n    },\n    _go2: function (buf) {\n      /** @type {undefined | string} */\n      var res;\n      switch (buf.type_) {\n        case 'chemfive':\n          res = \"\";\n          var b5 = {\n            a: texify._goInner(buf.a),\n            b: texify._goInner(buf.b),\n            p: texify._goInner(buf.p),\n            o: texify._goInner(buf.o),\n            q: texify._goInner(buf.q),\n            d: texify._goInner(buf.d)\n          };\n          //\n          // a\n          //\n          if (b5.a) {\n            if (b5.a.match(/^[+\\-]/)) { b5.a = \"{\"+b5.a+\"}\"; }\n            res += b5.a + \"\\\\,\";\n          }\n          //\n          // b and p\n          //\n          if (b5.b || b5.p) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"^{\\\\hphantom{\"+(b5.b||\"\")+\"}}_{\\\\hphantom{\"+(b5.p||\"\")+\"}}\";\n            res += \"{\\\\vphantom{X}}\";\n            res += \"^{\\\\smash[t]{\\\\vphantom{2}}\\\\mathllap{\"+(b5.b||\"\")+\"}}\";\n            res += \"_{\\\\vphantom{2}\\\\mathllap{\\\\smash[t]{\"+(b5.p||\"\")+\"}}}\";\n          }\n          //\n          // o\n          //\n          if (b5.o) {\n            if (b5.o.match(/^[+\\-]/)) { b5.o = \"{\"+b5.o+\"}\"; }\n            res += b5.o;\n          }\n          //\n          // q and d\n          //\n          if (buf.dType === 'kv') {\n            if (b5.d || b5.q) {\n              res += \"{\\\\vphantom{X}}\";\n            }\n            if (b5.d) {\n              res += \"^{\"+b5.d+\"}\";\n            }\n            if (b5.q) {\n              res += \"_{\\\\smash[t]{\"+b5.q+\"}}\";\n            }\n          } else if (buf.dType === 'oxidation') {\n            if (b5.d) {\n              res += \"{\\\\vphantom{X}}\";\n              res += \"^{\"+b5.d+\"}\";\n            }\n            if (b5.q) {\n              res += \"{\\\\vphantom{X}}\";\n              res += \"_{\\\\smash[t]{\"+b5.q+\"}}\";\n            }\n          } else {\n            if (b5.q) {\n              res += \"{\\\\vphantom{X}}\";\n              res += \"_{\\\\smash[t]{\"+b5.q+\"}}\";\n            }\n            if (b5.d) {\n              res += \"{\\\\vphantom{X}}\";\n              res += \"^{\"+b5.d+\"}\";\n            }\n          }\n          break;\n        case 'rm':\n          res = \"\\\\mathrm{\"+buf.p1+\"}\";\n          break;\n        case 'text':\n          if (buf.p1.match(/[\\^_]/)) {\n            buf.p1 = buf.p1.replace(\" \", \"~\").replace(\"-\", \"\\\\text{-}\");\n            res = \"\\\\mathrm{\"+buf.p1+\"}\";\n          } else {\n            res = \"\\\\text{\"+buf.p1+\"}\";\n          }\n          break;\n        case 'roman numeral':\n          res = \"\\\\mathrm{\"+buf.p1+\"}\";\n          break;\n        case 'state of aggregation':\n          res = \"\\\\mskip2mu \"+texify._goInner(buf.p1);\n          break;\n        case 'state of aggregation subscript':\n          res = \"\\\\mskip1mu \"+texify._goInner(buf.p1);\n          break;\n        case 'bond':\n          res = texify._getBond(buf.kind_);\n          if (!res) {\n            throw [\"MhchemErrorBond\", \"mhchem Error. Unknown bond type (\" + buf.kind_ + \")\"];\n          }\n          break;\n        case 'frac':\n          var c = \"\\\\frac{\" + buf.p1 + \"}{\" + buf.p2 + \"}\";\n          res = \"\\\\mathchoice{\\\\textstyle\"+c+\"}{\"+c+\"}{\"+c+\"}{\"+c+\"}\";\n          break;\n        case 'pu-frac':\n          var d = \"\\\\frac{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n          res = \"\\\\mathchoice{\\\\textstyle\"+d+\"}{\"+d+\"}{\"+d+\"}{\"+d+\"}\";\n          break;\n        case 'tex-math':\n          res = buf.p1 + \" \";\n          break;\n        case 'frac-ce':\n          res = \"\\\\frac{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n          break;\n        case 'overset':\n          res = \"\\\\overset{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n          break;\n        case 'underset':\n          res = \"\\\\underset{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n          break;\n        case 'underbrace':\n          res =  \"\\\\underbrace{\" + texify._goInner(buf.p1) + \"}_{\" + texify._goInner(buf.p2) + \"}\";\n          break;\n        case 'color':\n          res = \"{\\\\color{\" + buf.color1 + \"}{\" + texify._goInner(buf.color2) + \"}}\";\n          break;\n        case 'color0':\n          res = \"\\\\color{\" + buf.color + \"}\";\n          break;\n        case 'arrow':\n          var b6 = {\n            rd: texify._goInner(buf.rd),\n            rq: texify._goInner(buf.rq)\n          };\n          var arrow = \"\\\\x\" + texify._getArrow(buf.r);\n          if (b6.rq) { arrow += \"[{\" + b6.rq + \"}]\"; }\n          if (b6.rd) {\n            arrow += \"{\" + b6.rd + \"}\";\n          } else {\n            arrow += \"{}\";\n          }\n          res = arrow;\n          break;\n        case 'operator':\n          res = texify._getOperator(buf.kind_);\n          break;\n        case '1st-level escape':\n          res = buf.p1+\" \";  // &, \\\\\\\\, \\\\hlin\n          break;\n        case 'space':\n          res = \" \";\n          break;\n        case 'entitySkip':\n          res = \"~\";\n          break;\n        case 'pu-space-1':\n          res = \"~\";\n          break;\n        case 'pu-space-2':\n          res = \"\\\\mkern3mu \";\n          break;\n        case '1000 separator':\n          res = \"\\\\mkern2mu \";\n          break;\n        case 'commaDecimal':\n          res = \"{,}\";\n          break;\n          case 'comma enumeration L':\n          res = \"{\"+buf.p1+\"}\\\\mkern6mu \";\n          break;\n        case 'comma enumeration M':\n          res = \"{\"+buf.p1+\"}\\\\mkern3mu \";\n          break;\n        case 'comma enumeration S':\n          res = \"{\"+buf.p1+\"}\\\\mkern1mu \";\n          break;\n        case 'hyphen':\n          res = \"\\\\text{-}\";\n          break;\n        case 'addition compound':\n          res = \"\\\\,{\\\\cdot}\\\\,\";\n          break;\n        case 'electron dot':\n          res = \"\\\\mkern1mu \\\\bullet\\\\mkern1mu \";\n          break;\n        case 'KV x':\n          res = \"{\\\\times}\";\n          break;\n        case 'prime':\n          res = \"\\\\prime \";\n          break;\n        case 'cdot':\n          res = \"\\\\cdot \";\n          break;\n        case 'tight cdot':\n          res = \"\\\\mkern1mu{\\\\cdot}\\\\mkern1mu \";\n          break;\n        case 'times':\n          res = \"\\\\times \";\n          break;\n        case 'circa':\n          res = \"{\\\\sim}\";\n          break;\n        case '^':\n          res = \"uparrow\";\n          break;\n        case 'v':\n          res = \"downarrow\";\n          break;\n        case 'ellipsis':\n          res = \"\\\\ldots \";\n          break;\n        case '/':\n          res = \"/\";\n          break;\n        case ' / ':\n          res = \"\\\\,/\\\\,\";\n          break;\n        default:\n          assertNever(buf);\n          throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];  // Missing texify rule or unknown MhchemParser output\n      }\n      assertString(res);\n      return res;\n    },\n    _getArrow: function (a) {\n      switch (a) {\n        case \"->\": return \"rightarrow\";\n        case \"\\u2192\": return \"rightarrow\";\n        case \"\\u27F6\": return \"rightarrow\";\n        case \"<-\": return \"leftarrow\";\n        case \"<->\": return \"leftrightarrow\";\n        case \"<-->\": return \"rightleftarrows\";\n        case \"<=>\": return \"rightleftharpoons\";\n        case \"\\u21CC\": return \"rightleftharpoons\";\n        case \"<=>>\": return \"rightequilibrium\";\n        case \"<<=>\": return \"leftequilibrium\";\n        default:\n          assertNever(a);\n          throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n      }\n    },\n    _getBond: function (a) {\n      switch (a) {\n        case \"-\": return \"{-}\";\n        case \"1\": return \"{-}\";\n        case \"=\": return \"{=}\";\n        case \"2\": return \"{=}\";\n        case \"#\": return \"{\\\\equiv}\";\n        case \"3\": return \"{\\\\equiv}\";\n        case \"~\": return \"{\\\\tripledash}\";\n        case \"~-\": return \"{\\\\mathrlap{\\\\raisebox{-.1em}{$-$}}\\\\raisebox{.1em}{$\\\\tripledash$}}\";\n        case \"~=\": return \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$\\\\tripledash$}}-}\";\n        case \"~--\": return \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$\\\\tripledash$}}-}\";\n        case \"-~-\": return \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$-$}}\\\\tripledash}\";\n        case \"...\": return \"{{\\\\cdot}{\\\\cdot}{\\\\cdot}}\";\n        case \"....\": return \"{{\\\\cdot}{\\\\cdot}{\\\\cdot}{\\\\cdot}}\";\n        case \"->\": return \"{\\\\rightarrow}\";\n        case \"<-\": return \"{\\\\leftarrow}\";\n        case \"<\": return \"{<}\";\n        case \">\": return \"{>}\";\n        default:\n          assertNever(a);\n          throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n      }\n    },\n    _getOperator: function (a) {\n      switch (a) {\n        case \"+\": return \" {}+{} \";\n        case \"-\": return \" {}-{} \";\n        case \"=\": return \" {}={} \";\n        case \"<\": return \" {}<{} \";\n        case \">\": return \" {}>{} \";\n        case \"<<\": return \" {}\\\\ll{} \";\n        case \">>\": return \" {}\\\\gg{} \";\n        case \"\\\\pm\": return \" {}\\\\pm{} \";\n        case \"\\\\approx\": return \" {}\\\\approx{} \";\n        case \"$\\\\approx$\": return \" {}\\\\approx{} \";\n        case \"v\": return \" \\\\downarrow{} \";\n        case \"(v)\": return \" \\\\downarrow{} \";\n        case \"^\": return \" \\\\uparrow{} \";\n        case \"(^)\": return \" \\\\uparrow{} \";\n        default:\n          assertNever(a);\n          throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n      }\n    }\n  };\n\n  //\n  // Helpers for code analysis\n  // Will show type error at calling position\n  //\n  /** @param {number} a */\n  function assertNever(a) {}\n  /** @param {string} a */\n  function assertString(a) {}\n"],"names":["katex","input","match"],"mappings":"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"}